// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: post.sql

package db

import (
	"context"
	"time"
)

const createPost = `-- name: CreatePost :one
INSERT INTO post (
  title,
  description,
  content,
  user_name
) VALUES (
    $1, $2, $3, $4
) RETURNING id, title, description, content, user_name, created_at, updated_at
`

type CreatePostParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	Content     string `json:"content"`
	UserName    string `json:"userName"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Title,
		arg.Description,
		arg.Content,
		arg.UserName,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Content,
		&i.UserName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM post WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, title, description, content, user_name, created_at, updated_at FROM post
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Content,
		&i.UserName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostForUpdate = `-- name: GetPostForUpdate :one
SELECT id, title, description, content, user_name, created_at, updated_at FROM post
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetPostForUpdate(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostForUpdate, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Content,
		&i.UserName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, title, description, content, user_name, created_at, updated_at FROM post
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPosts(ctx context.Context, arg ListPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Content,
			&i.UserName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsForUser = `-- name: ListPostsForUser :many
SELECT "user".id, username, password, full_name, email, password_changed_at, "user".created_at, post.id, title, description, content, user_name, post.created_at, updated_at FROM "user"
JOIN post ON post.user_name $1
LIMIT $2
OFFSET $3
`

type ListPostsForUserParams struct {
	Column1 interface{} `json:"column1"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

type ListPostsForUserRow struct {
	ID                int64     `json:"id"`
	Username          string    `json:"username"`
	Password          string    `json:"password"`
	FullName          string    `json:"fullName"`
	Email             string    `json:"email"`
	PasswordChangedAt time.Time `json:"passwordChangedAt"`
	CreatedAt         time.Time `json:"createdAt"`
	ID_2              int64     `json:"id2"`
	Title             string    `json:"title"`
	Description       string    `json:"description"`
	Content           string    `json:"content"`
	UserName          string    `json:"userName"`
	CreatedAt_2       time.Time `json:"createdAt2"`
	UpdatedAt         time.Time `json:"updatedAt"`
}

func (q *Queries) ListPostsForUser(ctx context.Context, arg ListPostsForUserParams) ([]ListPostsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listPostsForUser, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPostsForUserRow{}
	for rows.Next() {
		var i ListPostsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.FullName,
			&i.Email,
			&i.PasswordChangedAt,
			&i.CreatedAt,
			&i.ID_2,
			&i.Title,
			&i.Description,
			&i.Content,
			&i.UserName,
			&i.CreatedAt_2,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE post 
SET content = $2
WHERE id = $1
RETURNING id, title, description, content, user_name, created_at, updated_at
`

type UpdatePostParams struct {
	ID      int64  `json:"id"`
	Content string `json:"content"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost, arg.ID, arg.Content)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Content,
		&i.UserName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
